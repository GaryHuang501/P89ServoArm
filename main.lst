0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #130501 (Feb 14 2012) (MSVC)
0000              4   ; This file was generated Wed May 01 18:48:33 2013
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_ISEG    segment idata
0000             13            R_OSEG    segment data overlay
0000             14            BIT_BANK  segment data overlay
0000             15            R_HOME    segment code
0000             16            R_GSINIT  segment code
0000             17            R_IXSEG   segment xdata
0000             18            R_CONST   segment code
0000             19            R_XINIT   segment code
0000             20            R_DINIT   segment code
0000             21   
0000             22   ;--------------------------------------------------------
0000             23   ; Public variables in this module
0000             24   ;--------------------------------------------------------
0000             25            public _main
0000             26            public _init_Fans
0000             27            public _init_Serial_Port
0000             28            public _set_Angle
0000             29            public _Wait1S
0000             30            public _servo_Offset
0000             31            public _max_Servo_Set_Angle
0000             32            public _servo_Set_Angle
0000             33            public _set_Angle_PARM_2
0000             34            public _set_Pulse_Width
0000             35            public _get_Command
0000             36            public _safety_Position
0000             37            public _init_Servo
0000             38            public _set_Timer0
0000             39            public _set_Timer1
0000             40            public _init_ADC
0000             41   ;--------------------------------------------------------
0000             42   ; Special Function Registers
0000             43   ;--------------------------------------------------------
0000             44   _ACC            DATA 0xe0
0000             45   _ADCON0         DATA 0x8e
0000             46   _ADCON1         DATA 0x97
0000             47   _ADINS          DATA 0xa3
0000             48   _ADMODA         DATA 0xc0
0000             49   _ADMODB         DATA 0xa1
0000             50   _AD0BH          DATA 0xbb
0000             51   _AD0BL          DATA 0xa6
0000             52   _AD0DAT0        DATA 0xc5
0000             53   _AD0DAT1        DATA 0xc6
0000             54   _AD0DAT2        DATA 0xc7
0000             55   _AD0DAT3        DATA 0xf4
0000             56   _AD1BH          DATA 0xc4
0000             57   _AD1BL          DATA 0xbc
0000             58   _AD1DAT0        DATA 0xd5
0000             59   _AD1DAT1        DATA 0xd6
0000             60   _AD1DAT2        DATA 0xd7
0000             61   _AD1DAT3        DATA 0xf5
0000             62   _AUXR1          DATA 0xa2
0000             63   _B              DATA 0xf0
0000             64   _BRGR0          DATA 0xbe
0000             65   _BRGR1          DATA 0xbf
0000             66   _BRGCON         DATA 0xbd
0000             67   _CCCRA          DATA 0xea
0000             68   _CCCRB          DATA 0xeb
0000             69   _CCCRC          DATA 0xec
0000             70   _CCCRD          DATA 0xed
0000             71   _CMP1           DATA 0xac
0000             72   _CMP2           DATA 0xad
0000             73   _DEECON         DATA 0xf1
0000             74   _DEEDAT         DATA 0xf2
0000             75   _DEEADR         DATA 0xf3
0000             76   _DIVM           DATA 0x95
0000             77   _DPH            DATA 0x83
0000             78   _DPL            DATA 0x82
0000             79   _FMADRH         DATA 0xe7
0000             80   _FMADRL         DATA 0xe6
0000             81   _FMCON          DATA 0xe4
0000             82   _FMDATA         DATA 0xe5
0000             83   _I2ADR          DATA 0xdb
0000             84   _I2CON          DATA 0xd8
0000             85   _I2DAT          DATA 0xda
0000             86   _I2SCLH         DATA 0xdd
0000             87   _I2SCLL         DATA 0xdc
0000             88   _I2STAT         DATA 0xd9
0000             89   _ICRAH          DATA 0xab
0000             90   _ICRAL          DATA 0xaa
0000             91   _ICRBH          DATA 0xaf
0000             92   _ICRBL          DATA 0xae
0000             93   _IEN0           DATA 0xa8
0000             94   _IEN1           DATA 0xe8
0000             95   _IP0            DATA 0xb8
0000             96   _IP0H           DATA 0xb7
0000             97   _IP1            DATA 0xf8
0000             98   _IP1H           DATA 0xf7
0000             99   _KBCON          DATA 0x94
0000            100   _KBMASK         DATA 0x86
0000            101   _KBPATN         DATA 0x93
0000            102   _OCRAH          DATA 0xef
0000            103   _OCRAL          DATA 0xee
0000            104   _OCRBH          DATA 0xfb
0000            105   _OCRBL          DATA 0xfa
0000            106   _OCRCH          DATA 0xfd
0000            107   _OCRCL          DATA 0xfc
0000            108   _OCRDH          DATA 0xff
0000            109   _OCRDL          DATA 0xfe
0000            110   _P0             DATA 0x80
0000            111   _P1             DATA 0x90
0000            112   _P2             DATA 0xa0
0000            113   _P3             DATA 0xb0
0000            114   _P0M1           DATA 0x84
0000            115   _P0M2           DATA 0x85
0000            116   _P1M1           DATA 0x91
0000            117   _P1M2           DATA 0x92
0000            118   _P2M1           DATA 0xa4
0000            119   _P2M2           DATA 0xa5
0000            120   _P3M1           DATA 0xb1
0000            121   _P3M2           DATA 0xb2
0000            122   _PCON           DATA 0x87
0000            123   _PCONA          DATA 0xb5
0000            124   _PSW            DATA 0xd0
0000            125   _PT0AD          DATA 0xf6
0000            126   _RSTSRC         DATA 0xdf
0000            127   _RTCCON         DATA 0xd1
0000            128   _RTCH           DATA 0xd2
0000            129   _RTCL           DATA 0xd3
0000            130   _SADDR          DATA 0xa9
0000            131   _SADEN          DATA 0xb9
0000            132   _SBUF           DATA 0x99
0000            133   _SCON           DATA 0x98
0000            134   _SSTAT          DATA 0xba
0000            135   _SP             DATA 0x81
0000            136   _SPCTL          DATA 0xe2
0000            137   _SPSTAT         DATA 0xe1
0000            138   _SPDAT          DATA 0xe3
0000            139   _TAMOD          DATA 0x8f
0000            140   _TCON           DATA 0x88
0000            141   _TCR20          DATA 0xc8
0000            142   _TCR21          DATA 0xf9
0000            143   _TH0            DATA 0x8c
0000            144   _TH1            DATA 0x8d
0000            145   _TH2            DATA 0xcd
0000            146   _TICR2          DATA 0xc9
0000            147   _TIFR2          DATA 0xe9
0000            148   _TISE2          DATA 0xde
0000            149   _TL0            DATA 0x8a
0000            150   _TL1            DATA 0x8b
0000            151   _TL2            DATA 0xcc
0000            152   _TMOD           DATA 0x89
0000            153   _TOR2H          DATA 0xcf
0000            154   _TOR2L          DATA 0xce
0000            155   _TPCR2H         DATA 0xcb
0000            156   _TPCR2L         DATA 0xca
0000            157   _TRIM           DATA 0x96
0000            158   _WDCON          DATA 0xa7
0000            159   _WDL            DATA 0xc1
0000            160   _WFEED1         DATA 0xc2
0000            161   _WFEED2         DATA 0xc3
0000            162   ;--------------------------------------------------------
0000            163   ; special function bits
0000            164   ;--------------------------------------------------------
0000            165   _ACC_7          BIT 0xe7
0000            166   _ACC_6          BIT 0xe6
0000            167   _ACC_5          BIT 0xe5
0000            168   _ACC_4          BIT 0xe4
0000            169   _ACC_3          BIT 0xe3
0000            170   _ACC_2          BIT 0xe2
0000            171   _ACC_1          BIT 0xe1
0000            172   _ACC_0          BIT 0xe0
0000            173   _ADMODA_7       BIT 0xc7
0000            174   _ADMODA_6       BIT 0xc6
0000            175   _ADMODA_5       BIT 0xc5
0000            176   _ADMODA_4       BIT 0xc4
0000            177   _ADMODA_3       BIT 0xc3
0000            178   _ADMODA_2       BIT 0xc2
0000            179   _ADMODA_1       BIT 0xc1
0000            180   _ADMODA_0       BIT 0xc0
0000            181   _BNDI1          BIT 0xc7
0000            182   _BURST1         BIT 0xc6
0000            183   _SCC1           BIT 0xc5
0000            184   _SCAN1          BIT 0xc4
0000            185   _BNDI0          BIT 0xc3
0000            186   _BURST0         BIT 0xc2
0000            187   _SCC0           BIT 0xc1
0000            188   _SCAN0          BIT 0xc0
0000            189   _B_7            BIT 0xf7
0000            190   _B_6            BIT 0xf6
0000            191   _B_5            BIT 0xf5
0000            192   _B_4            BIT 0xf4
0000            193   _B_3            BIT 0xf3
0000            194   _B_2            BIT 0xf2
0000            195   _B_1            BIT 0xf1
0000            196   _B_0            BIT 0xf0
0000            197   _I2CON_7        BIT 0xdf
0000            198   _I2CON_6        BIT 0xde
0000            199   _I2CON_5        BIT 0xdd
0000            200   _I2CON_4        BIT 0xdc
0000            201   _I2CON_3        BIT 0xdb
0000            202   _I2CON_2        BIT 0xda
0000            203   _I2CON_1        BIT 0xd9
0000            204   _I2CON_0        BIT 0xd8
0000            205   _I2EN           BIT 0xde
0000            206   _STA            BIT 0xdd
0000            207   _STO            BIT 0xdc
0000            208   _SI             BIT 0xdb
0000            209   _AA             BIT 0xda
0000            210   _CRSEL          BIT 0xd8
0000            211   _IEN0_7         BIT 0xaf
0000            212   _IEN0_6         BIT 0xae
0000            213   _IEN0_5         BIT 0xad
0000            214   _IEN0_4         BIT 0xac
0000            215   _IEN0_3         BIT 0xab
0000            216   _IEN0_2         BIT 0xaa
0000            217   _IEN0_1         BIT 0xa9
0000            218   _IEN0_0         BIT 0xa8
0000            219   _EA             BIT 0xaf
0000            220   _EWDRT          BIT 0xae
0000            221   _EBO            BIT 0xad
0000            222   _ES             BIT 0xac
0000            223   _ESR            BIT 0xac
0000            224   _ET1            BIT 0xab
0000            225   _EX1            BIT 0xaa
0000            226   _ET0            BIT 0xa9
0000            227   _EX0            BIT 0xa8
0000            228   _IEN1_7         BIT 0xef
0000            229   _IEN1_6         BIT 0xee
0000            230   _IEN1_5         BIT 0xed
0000            231   _IEN1_4         BIT 0xec
0000            232   _IEN1_3         BIT 0xeb
0000            233   _IEN1_2         BIT 0xea
0000            234   _IEN1_1         BIT 0xe9
0000            235   _IEN1_0         BIT 0xe8
0000            236   _EADEE          BIT 0xef
0000            237   _EST            BIT 0xee
0000            238   _ECCU           BIT 0xec
0000            239   _ESPI           BIT 0xeb
0000            240   _EC             BIT 0xea
0000            241   _EKBI           BIT 0xe9
0000            242   _EI2C           BIT 0xe8
0000            243   _IP0_7          BIT 0xbf
0000            244   _IP0_6          BIT 0xbe
0000            245   _IP0_5          BIT 0xbd
0000            246   _IP0_4          BIT 0xbc
0000            247   _IP0_3          BIT 0xbb
0000            248   _IP0_2          BIT 0xba
0000            249   _IP0_1          BIT 0xb9
0000            250   _IP0_0          BIT 0xb8
0000            251   _PWDRT          BIT 0xbe
0000            252   _PBO            BIT 0xbd
0000            253   _PS             BIT 0xbc
0000            254   _PSR            BIT 0xbc
0000            255   _PT1            BIT 0xbb
0000            256   _PX1            BIT 0xba
0000            257   _PT0            BIT 0xb9
0000            258   _PX0            BIT 0xb8
0000            259   _IP1_7          BIT 0xff
0000            260   _IP1_6          BIT 0xfe
0000            261   _IP1_5          BIT 0xfd
0000            262   _IP1_4          BIT 0xfc
0000            263   _IP1_3          BIT 0xfb
0000            264   _IP1_2          BIT 0xfa
0000            265   _IP1_1          BIT 0xf9
0000            266   _IP1_0          BIT 0xf8
0000            267   _PADEE          BIT 0xff
0000            268   _PST            BIT 0xfe
0000            269   _PCCU           BIT 0xfc
0000            270   _PSPI           BIT 0xfb
0000            271   _PC             BIT 0xfa
0000            272   _PKBI           BIT 0xf9
0000            273   _PI2C           BIT 0xf8
0000            274   _P0_7           BIT 0x87
0000            275   _P0_6           BIT 0x86
0000            276   _P0_5           BIT 0x85
0000            277   _P0_4           BIT 0x84
0000            278   _P0_3           BIT 0x83
0000            279   _P0_2           BIT 0x82
0000            280   _P0_1           BIT 0x81
0000            281   _P0_0           BIT 0x80
0000            282   _T1             BIT 0x87
0000            283   _KB7            BIT 0x87
0000            284   _CMP_1          BIT 0x86
0000            285   _KB6            BIT 0x86
0000            286   _CMPREF         BIT 0x85
0000            287   _KB5            BIT 0x85
0000            288   _CIN1A          BIT 0x84
0000            289   _KB4            BIT 0x84
0000            290   _CIN1B          BIT 0x83
0000            291   _KB3            BIT 0x83
0000            292   _CIN2A          BIT 0x82
0000            293   _KB2            BIT 0x82
0000            294   _CIN2B          BIT 0x81
0000            295   _KB1            BIT 0x81
0000            296   _CMP_2          BIT 0x80
0000            297   _KB0            BIT 0x80
0000            298   _P1_7           BIT 0x97
0000            299   _P1_6           BIT 0x96
0000            300   _P1_5           BIT 0x95
0000            301   _P1_4           BIT 0x94
0000            302   _P1_3           BIT 0x93
0000            303   _P1_2           BIT 0x92
0000            304   _P1_1           BIT 0x91
0000            305   _P1_0           BIT 0x90
0000            306   _OCC            BIT 0x97
0000            307   _OCB            BIT 0x96
0000            308   _RST            BIT 0x95
0000            309   _INT1           BIT 0x94
0000            310   _INT0           BIT 0x93
0000            311   _SDA            BIT 0x93
0000            312   _T0             BIT 0x92
0000            313   _SCL            BIT 0x92
0000            314   _RXD            BIT 0x91
0000            315   _TXD            BIT 0x90
0000            316   _P2_7           BIT 0xa7
0000            317   _P2_6           BIT 0xa6
0000            318   _P2_5           BIT 0xa5
0000            319   _P2_4           BIT 0xa4
0000            320   _P2_3           BIT 0xa3
0000            321   _P2_2           BIT 0xa2
0000            322   _P2_1           BIT 0xa1
0000            323   _P2_0           BIT 0xa0
0000            324   _ICA            BIT 0xa7
0000            325   _OCA            BIT 0xa6
0000            326   _SPICLK         BIT 0xa5
0000            327   _SS             BIT 0xa4
0000            328   _MISO           BIT 0xa3
0000            329   _MOSI           BIT 0xa2
0000            330   _OCD            BIT 0xa1
0000            331   _ICB            BIT 0xa0
0000            332   _P3_7           BIT 0xb7
0000            333   _P3_6           BIT 0xb6
0000            334   _P3_5           BIT 0xb5
0000            335   _P3_4           BIT 0xb4
0000            336   _P3_3           BIT 0xb3
0000            337   _P3_2           BIT 0xb2
0000            338   _P3_1           BIT 0xb1
0000            339   _P3_0           BIT 0xb0
0000            340   _XTAL1          BIT 0xb1
0000            341   _XTAL2          BIT 0xb0
0000            342   _PSW_7          BIT 0xd7
0000            343   _PSW_6          BIT 0xd6
0000            344   _PSW_5          BIT 0xd5
0000            345   _PSW_4          BIT 0xd4
0000            346   _PSW_3          BIT 0xd3
0000            347   _PSW_2          BIT 0xd2
0000            348   _PSW_1          BIT 0xd1
0000            349   _PSW_0          BIT 0xd0
0000            350   _CY             BIT 0xd7
0000            351   _AC             BIT 0xd6
0000            352   _F0             BIT 0xd5
0000            353   _RS1            BIT 0xd4
0000            354   _RS0            BIT 0xd3
0000            355   _OV             BIT 0xd2
0000            356   _F1             BIT 0xd1
0000            357   _P              BIT 0xd0
0000            358   _SCON_7         BIT 0x9f
0000            359   _SCON_6         BIT 0x9e
0000            360   _SCON_5         BIT 0x9d
0000            361   _SCON_4         BIT 0x9c
0000            362   _SCON_3         BIT 0x9b
0000            363   _SCON_2         BIT 0x9a
0000            364   _SCON_1         BIT 0x99
0000            365   _SCON_0         BIT 0x98
0000            366   _SM0            BIT 0x9f
0000            367   _FE             BIT 0x9f
0000            368   _SM1            BIT 0x9e
0000            369   _SM2            BIT 0x9d
0000            370   _REN            BIT 0x9c
0000            371   _TB8            BIT 0x9b
0000            372   _RB8            BIT 0x9a
0000            373   _TI             BIT 0x99
0000            374   _RI             BIT 0x98
0000            375   _TCON_7         BIT 0x8f
0000            376   _TCON_6         BIT 0x8e
0000            377   _TCON_5         BIT 0x8d
0000            378   _TCON_4         BIT 0x8c
0000            379   _TCON_3         BIT 0x8b
0000            380   _TCON_2         BIT 0x8a
0000            381   _TCON_1         BIT 0x89
0000            382   _TCON_0         BIT 0x88
0000            383   _TF1            BIT 0x8f
0000            384   _TR1            BIT 0x8e
0000            385   _TF0            BIT 0x8d
0000            386   _TR0            BIT 0x8c
0000            387   _IE1            BIT 0x8b
0000            388   _IT1            BIT 0x8a
0000            389   _IE0            BIT 0x89
0000            390   _IT0            BIT 0x88
0000            391   _TCR20_7        BIT 0xcf
0000            392   _TCR20_6        BIT 0xce
0000            393   _TCR20_5        BIT 0xcd
0000            394   _TCR20_4        BIT 0xcc
0000            395   _TCR20_3        BIT 0xcb
0000            396   _TCR20_2        BIT 0xca
0000            397   _TCR20_1        BIT 0xc9
0000            398   _TCR20_0        BIT 0xc8
0000            399   _PLEEN          BIT 0xcf
0000            400   _HLTRN          BIT 0xce
0000            401   _HLTEN          BIT 0xcd
0000            402   _ALTCD          BIT 0xcc
0000            403   _ALTAB          BIT 0xcb
0000            404   _TDIR2          BIT 0xca
0000            405   _TMOD21         BIT 0xc9
0000            406   _TMOD20         BIT 0xc8
0000            407   ;--------------------------------------------------------
0000            408   ; overlayable register banks
0000            409   ;--------------------------------------------------------
0000            410            rbank0 segment data overlay
0000            411            rbank1 segment data overlay
0000            412   ;--------------------------------------------------------
0000            413   ; internal ram data
0000            414   ;--------------------------------------------------------
0000            415            rseg R_DSEG
0000            416   _TH0_Phase:
0000            417            ds 8
0008            418   _TL0_Phase:
0008            419            ds 8
0010            420   _TH0_Phase_FirstDelay:
0010            421            ds 2
0012            422   _TL0_Phase_FirstDelay:
0012            423            ds 2
0014            424   _servo_Priority:
0014            425            ds 4
0018            426   _phase:
0018            427            ds 1
0019            428   _calculate_Timer_Cycle_ii_1_1:
0019            429            ds 1
001A            430   _calculate_Timer_Cycle_sloc0_1_0:
001A            431            ds 4
001E            432   _get_Command_buffer_1_1:
001E            433            ds 4
0022            434   _set_Angle_PARM_2:
0022            435            ds 2
0024            436   ;--------------------------------------------------------
0024            437   ; overlayable items in internal ram 
0024            438   ;--------------------------------------------------------
0000            439            rseg    R_OSEG
0000            440   _set_Servo_Priority_servo_Index_1_1:
0000            441            ds 4
0004            442   _set_Servo_Priority_sloc0_1_0:
0004            443            ds 2
0006            444            rseg    R_OSEG
0006            445   _set_Phases_zz_1_1:
0006            446            ds 1
0007            447            rseg    R_OSEG
0007            448   _init_Servo_starting_Angles_1_1:
0007            449            ds 4
000B            450   ;--------------------------------------------------------
000B            451   ; indirectly addressable internal ram data
000B            452   ;--------------------------------------------------------
0000            453            rseg R_ISEG
0000            454   _timer0_Servo_PWM_Width:
0000            455            ds 8
0008            456   _servo_Set_Angle:
0008            457            ds 8
0010            458   _max_Servo_Set_Angle:
0010            459            ds 4
0014            460   _servo_Offset:
0014            461            ds 4
0018            462   ;--------------------------------------------------------
0018            463   ; absolute internal ram data
0018            464   ;--------------------------------------------------------
0000            465            DSEG
0000            466   ;--------------------------------------------------------
0000            467   ; bit data
0000            468   ;--------------------------------------------------------
0000            469            rseg R_BSEG
0000            470   ;--------------------------------------------------------
0000            471   ; paged external ram data
0000            472   ;--------------------------------------------------------
0000            473            rseg R_XSEG
0000            474   ;--------------------------------------------------------
0000            475   ; external ram data
0000            476   ;--------------------------------------------------------
0000            477            rseg R_XSEG
0000            478   _BODCFG         XDATA 0xffc8
0000            479   _CLKCON         XDATA 0xffde
0000            480   _PGACON1        XDATA 0xffe1
0000            481   _PGACON1B       XDATA 0xffe4
0000            482   _PGA1TRIM8X16X  XDATA 0xffe3
0000            483   _PGA1TRIM2X4X   XDATA 0xffe2
0000            484   _PGACON0        XDATA 0xffca
0000            485   _PGACON0B       XDATA 0xffce
0000            486   _PGA0TRIM8X16X  XDATA 0xffcd
0000            487   _PGA0TRIM2X4X   XDATA 0xffcc
0000            488   _RTCDATH        XDATA 0xffbf
0000            489   _RTCDATL        XDATA 0xffbe
0000            490   ;--------------------------------------------------------
0000            491   ; absolute external ram data
0000            492   ;--------------------------------------------------------
0000            493            XSEG
0000            494   ;--------------------------------------------------------
0000            495   ; external initialized ram data
0000            496   ;--------------------------------------------------------
0000            497            rseg R_IXSEG
0000            498            rseg R_HOME
0000            499            rseg R_GSINIT
0000            500            rseg R_CSEG
0000            501   ;--------------------------------------------------------
0000            502   ; Reset entry point and interrupt vectors
0000            503   ;--------------------------------------------------------
0000            504            CSEG at 0x0000
0000 020100     505            ljmp    _crt0
000B            506            CSEG at 0x000b
000B 020100     507            ljmp    _Timer0_ISR
001B            508            CSEG at 0x001b
001B 020100     509            ljmp    _Timer1_ISR
001E            510   ;--------------------------------------------------------
001E            511   ; global & static initialisations
001E            512   ;--------------------------------------------------------
0000            513            rseg R_HOME
0000            514            rseg R_GSINIT
0000            515            rseg R_GSINIT
0000            516   ;--------------------------------------------------------
0000            517   ; data variables initialization
0000            518   ;--------------------------------------------------------
0000            519            rseg R_DINIT
0000            520   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:61: static volatile char phase = 0;
0000 750000     521            mov     _phase,#0x00
0003            522   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:58: idata const char servo_Offset[NUM_OF_SERVOS] = {SERVO_WRIST_OFFSET, SERVO_ELBOW_OFFSET, SERVO_BICEP_OFFSET, SERVO_SHOULDER_OFFSET};
0003 7800       523            mov     r0,#_servo_Offset
0005 7600       524            mov     @r0,#0x00
0007 7801       525            mov     r0,#(_servo_Offset + 0x0001)
0009 7600       526            mov     @r0,#0x00
000B 7802       527            mov     r0,#(_servo_Offset + 0x0002)
000D 760A       528            mov     @r0,#0x0A
000F 7803       529            mov     r0,#(_servo_Offset + 0x0003)
0011 76FB       530            mov     @r0,#0xFB
0013            531            ; The linker places a 'ret' at the end of segment R_DINIT.
0013            532   ;--------------------------------------------------------
0013            533   ; code
0013            534   ;--------------------------------------------------------
0000            535            rseg R_CSEG
0000            536   ;------------------------------------------------------------
0000            537   ;Allocation info for local variables in function 'Wait1S'
0000            538   ;------------------------------------------------------------
0000            539   ;------------------------------------------------------------
0000            540   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Global.h:29: void Wait1S (void)
0000            541   ;        -----------------------------------------
0000            542   ;         function Wait1S
0000            543   ;        -----------------------------------------
0000            544   _Wait1S:
0000            545            using   0
0000            546   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Global.h:38: _endasm;
0000            547            
0000 7A28       548             mov R2, #40
0002            549            L03:
0002 79FA       550            mov R1, #250
0004            551            L02:
0004 78B8       552            mov R0, #184
0006            553            L01:
0006 D800       554            djnz R0, L01 ; 2 machine cycles-> 2*0.27126us*184=100us
0008 D900       555                djnz R1, L02 ; 100us*250=0.025s
000A DA00       556                djnz R2, L03 ; 0.025s*40=1s
000C            557                
000C 22         558            ret
000D            559   ;------------------------------------------------------------
000D            560   ;Allocation info for local variables in function 'set_Pulse_Width'
000D            561   ;------------------------------------------------------------
000D            562   ;------------------------------------------------------------
000D            563   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:64: void set_Pulse_Width(void)
000D            564   ;        -----------------------------------------
000D            565   ;         function set_Pulse_Width
000D            566   ;        -----------------------------------------
000D            567   _set_Pulse_Width:
000D            568   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:66: slow_Down_Servo();
000D 120100     569            lcall   _slow_Down_Servo
0010            570   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:67: calculate_Timer_Cycle();
0010 120100     571            lcall   _calculate_Timer_Cycle
0013            572   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:68: set_Servo_Priority();
0013 120100     573            lcall   _set_Servo_Priority
0016            574   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:69: set_Phases();         
0016 020100     575            ljmp    _set_Phases
0019            576   ;------------------------------------------------------------
0019            577   ;Allocation info for local variables in function 'Timer0_ISR'
0019            578   ;------------------------------------------------------------
0019            579   ;------------------------------------------------------------
0019            580   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:75: static void Timer0_ISR (void) interrupt 1 using 0
0019            581   ;        -----------------------------------------
0019            582   ;         function Timer0_ISR
0019            583   ;        -----------------------------------------
0019            584   _Timer0_ISR:
0019 C0E0       585            push    acc
001B C002       586            push    ar2
001D C003       587            push    ar3
001F C000       588            push    ar0
0021 C0D0       589            push    psw
0023 75D000     590            mov     psw,#0x00
0026            591   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:77: TR0 = 0;
0026 C28C       592            clr     _TR0
0028            593   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:80: if(phase  == START_OVER) //Turn all pulses on and restart pwm generation
0028 7414       594            mov     a,#0x14
002A B50000     595            cjne    a,_phase,L004008?
002D            596   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:82: SERVO_PORTS = 0xFF;   
002D 7580FF     597            mov     _P0,#0xFF
0030            598   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:83: TH0 = TH0_Phase[0];
0030 85008C     599            mov     _TH0,_TH0_Phase
0033            600   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:84: TL0 = TL0_Phase[0];
0033 85008A     601            mov     _TL0,_TL0_Phase
0036            602   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:85: phase = 0;
0036 750000     603            mov     _phase,#0x00
0039 8001       604            sjmp    L004009?
003B            605   L004008?:
003B            606   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:88: else if(phase  ==  DELAY_5MS_PHASE) // == # servo - 1)
003B 7403       607            mov     a,#0x03
003D B50000     608            cjne    a,_phase,L004005?
0040            609   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:90: SERVO_PORTS = 0; //ALL OFF
0040 758000     610            mov     _P0,#0x00
0043            611   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:91: TH0 = TH0_Phase_FirstDelay;
0043 85008C     612            mov     _TH0,_TH0_Phase_FirstDelay
0046            613   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:92: TL0 = TL0_Phase_FirstDelay; 
0046 85008A     614            mov     _TL0,_TL0_Phase_FirstDelay
0049            615   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:93: phase = DELAY_15MS_PHASE;             
0049 750004     616            mov     _phase,#0x04
004C 8001       617            sjmp    L004009?
004E            618   L004005?:
004E            619   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:96: else if(phase  ==  DELAY_15MS_PHASE ) // == #servo)
004E 7404       620            mov     a,#0x04
0050 B50000     621            cjne    a,_phase,L004002?
0053            622   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:98: SERVO_PORTS = 0; //ALL OFF
0053 758000     623            mov     _P0,#0x00
0056            624   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:99: TH0 = RELOAD_15MS_HIGH;
0056 758C27     625            mov     _TH0,#0x27
0059            626   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:100: TL0 = RELOAD_15MS_LOW;
0059 758ACA     627            mov     _TL0,#0xCA
005C            628   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:101: phase = START_OVER;          
005C 750014     629            mov     _phase,#0x14
005F 8001       630            sjmp    L004009?
0061            631   L004002?:
0061            632   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:107: SERVO_PORTS = servo_Priority[phase]; 
0061 E500       633            mov     a,_phase
0063 2400       634            add     a,#_servo_Priority
0065 F8         635            mov     r0,a
0066 8680       636            mov     _P0,@r0
0068            637   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:108: phase++;
0068 0500       638            inc     _phase
006A            639   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:109: TH0 = TH0_Phase[phase];
006A E500       640            mov     a,_phase
006C 25E0       641            add     a,acc
006E 2400       642            add     a,#_TH0_Phase
0070 F8         643            mov     r0,a
0071 8602       644            mov     ar2,@r0
0073 08         645            inc     r0
0074 8603       646            mov     ar3,@r0
0076 8A8C       647            mov     _TH0,r2
0078            648   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:110: TL0 = TL0_Phase[phase];              
0078 E500       649            mov     a,_phase
007A 25E0       650            add     a,acc
007C 2400       651            add     a,#_TL0_Phase
007E F8         652            mov     r0,a
007F 8602       653            mov     ar2,@r0
0081 08         654            inc     r0
0082 8603       655            mov     ar3,@r0
0084 8A8A       656            mov     _TL0,r2
0086            657   L004009?:
0086            658   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:113: TF0 = 0;
0086 C28D       659            clr     _TF0
0088            660   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:114: TR0 = 1;
0088 D28C       661            setb    _TR0
008A D0D0       662            pop     psw
008C D000       663            pop     ar0
008E D003       664            pop     ar3
0090 D002       665            pop     ar2
0092 D0E0       666            pop     acc
0094 32         667            reti
0095            668   ;        eliminated unneeded push/pop ar1
0095            669   ;        eliminated unneeded push/pop dpl
0095            670   ;        eliminated unneeded push/pop dph
0095            671   ;        eliminated unneeded push/pop b
0095            672   ;------------------------------------------------------------
0095            673   ;Allocation info for local variables in function 'Timer1_ISR'
0095            674   ;------------------------------------------------------------
0095            675   ;------------------------------------------------------------
0095            676   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:117: static void Timer1_ISR (void) interrupt 3 using 1
0095            677   ;        -----------------------------------------
0095            678   ;         function Timer1_ISR
0095            679   ;        -----------------------------------------
0095            680   _Timer1_ISR:
0095            681            using   1
0095 C0D0       682            push    psw
0097 75D008     683            mov     psw,#0x08
009A            684   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:120: }
009A D0D0       685            pop     psw
009C 32         686            reti
009D            687   ;        eliminated unneeded push/pop dpl
009D            688   ;        eliminated unneeded push/pop dph
009D            689   ;        eliminated unneeded push/pop b
009D            690   ;        eliminated unneeded push/pop acc
009D            691   ;------------------------------------------------------------
009D            692   ;Allocation info for local variables in function 'Wait20ms'
009D            693   ;------------------------------------------------------------
009D            694   ;------------------------------------------------------------
009D            695   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:122: static void Wait20ms (void)
009D            696   ;        -----------------------------------------
009D            697   ;         function Wait20ms
009D            698   ;        -----------------------------------------
009D            699   _Wait20ms:
009D            700            using   0
009D            701   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:131: _endasm;
009D            702            
009D 7A01       703             mov R2, #1
009F            704            L13:
009F 79C8       705            mov R1, #200
00A1            706            L12:
00A1 78B8       707            mov R0, #184
00A3            708            L11:
00A3 D800       709            djnz R0, L11 ; 2 machine cycles-> 2*0.27126us*184=100us
00A5 D900       710                djnz R1, L12 ; 100us*200=0.020s
00A7 DA00       711                djnz R2, L13 ; 0.020s * 1
00A9            712                
00A9 22         713            ret
00AA            714   ;------------------------------------------------------------
00AA            715   ;Allocation info for local variables in function 'slow_Down_Servo'
00AA            716   ;------------------------------------------------------------
00AA            717   ;ii                        Allocated to registers r2 
00AA            718   ;------------------------------------------------------------
00AA            719   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:136: static void slow_Down_Servo(void)
00AA            720   ;        -----------------------------------------
00AA            721   ;         function slow_Down_Servo
00AA            722   ;        -----------------------------------------
00AA            723   _slow_Down_Servo:
00AA            724   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:141: Wait20ms();
00AA 120100     725            lcall   _Wait20ms
00AD            726   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:143: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
00AD 7A00       727            mov     r2,#0x00
00AF            728   L007006?:
00AF BA0400     729            cjne    r2,#0x04,L007017?
00B2            730   L007017?:
00B2 5001       731            jnc     L007010?
00B4            732   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:146: if (max_Servo_Set_Angle[ii] >  servo_Set_Angle[ii])
00B4 EA         733            mov     a,r2
00B5 2400       734            add     a,#_max_Servo_Set_Angle
00B7 F8         735            mov     r0,a
00B8 8603       736            mov     ar3,@r0
00BA EA         737            mov     a,r2
00BB 2A         738            add     a,r2
00BC 2400       739            add     a,#_servo_Set_Angle
00BE F8         740            mov     r0,a
00BF 8604       741            mov     ar4,@r0
00C1 08         742            inc     r0
00C2 8605       743            mov     ar5,@r0
00C4 18         744            dec     r0
00C5 7E00       745            mov     r6,#0x00
00C7 C3         746            clr     c
00C8 EC         747            mov     a,r4
00C9 9B         748            subb    a,r3
00CA ED         749            mov     a,r5
00CB 9E         750            subb    a,r6
00CC 5001       751            jnc     L007004?
00CE            752   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:148: servo_Set_Angle[ii]++;
00CE 0C         753            inc     r4
00CF BC0000     754            cjne    r4,#0x00,L007020?
00D2 0D         755            inc     r5
00D3            756   L007020?:
00D3 A604       757            mov     @r0,ar4
00D5 08         758            inc     r0
00D6 A605       759            mov     @r0,ar5
00D8 18         760            dec     r0
00D9 8001       761            sjmp    L007008?
00DB            762   L007004?:
00DB            763   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:150: else if (max_Servo_Set_Angle[ii] <  servo_Set_Angle[ii])
00DB 8604       764            mov     ar4,@r0
00DD 08         765            inc     r0
00DE 8605       766            mov     ar5,@r0
00E0 18         767            dec     r0
00E1 C3         768            clr     c
00E2 EB         769            mov     a,r3
00E3 9C         770            subb    a,r4
00E4 EE         771            mov     a,r6
00E5 9D         772            subb    a,r5
00E6 5001       773            jnc     L007008?
00E8            774   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:152: servo_Set_Angle[ii]--;
00E8 1C         775            dec     r4
00E9 BCFF00     776            cjne    r4,#0xff,L007022?
00EC 1D         777            dec     r5
00ED            778   L007022?:
00ED A604       779            mov     @r0,ar4
00EF 08         780            inc     r0
00F0 A605       781            mov     @r0,ar5
00F2 18         782            dec     r0
00F3            783   L007008?:
00F3            784   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:143: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
00F3 0A         785            inc     r2
00F4 8001       786            sjmp    L007006?
00F6            787   L007010?:
00F6 22         788            ret
00F7            789   ;------------------------------------------------------------
00F7            790   ;Allocation info for local variables in function 'set_Servo_Priority'
00F7            791   ;------------------------------------------------------------
00F7            792   ;servo_Index               Allocated with name '_set_Servo_Priority_servo_Index_1_1'
00F7            793   ;ii                        Allocated to registers r2 
00F7            794   ;jj                        Allocated to registers 
00F7            795   ;min_Index                 Allocated to registers r5 
00F7            796   ;min                       Allocated to registers r3 r4 
00F7            797   ;temp                      Allocated to registers r3 r4 
00F7            798   ;sloc0                     Allocated with name '_set_Servo_Priority_sloc0_1_0'
00F7            799   ;------------------------------------------------------------
00F7            800   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:160: static void set_Servo_Priority(void)
00F7            801   ;        -----------------------------------------
00F7            802   ;         function set_Servo_Priority
00F7            803   ;        -----------------------------------------
00F7            804   _set_Servo_Priority:
00F7            805   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:170: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
00F7 7A00       806            mov     r2,#0x00
00F9            807   L008003?:
00F9 BA0400     808            cjne    r2,#0x04,L008041?
00FC            809   L008041?:
00FC 5001       810            jnc     L008006?
00FE            811   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:172: servo_Index[ii] = ii;
00FE EA         812            mov     a,r2
00FF 2400       813            add     a,#_set_Servo_Priority_servo_Index_1_1
0101 F8         814            mov     r0,a
0102 A602       815            mov     @r0,ar2
0104            816   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:170: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
0104 0A         817            inc     r2
0105 8001       818            sjmp    L008003?
0107            819   L008006?:
0107            820   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:176: for (jj = 0; jj < NUM_OF_SERVOS; jj++)
0107 7A00       821            mov     r2,#0x00
0109            822   L008011?:
0109 BA0400     823            cjne    r2,#0x04,L008043?
010C            824   L008043?:
010C 4001       825            jc      L008044?
010E 020100     826            ljmp    L008014?
0111            827   L008044?:
0111            828   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:179: min = timer0_Servo_PWM_Width[jj];
0111 EA         829            mov     a,r2
0112 2A         830            add     a,r2
0113 2400       831            add     a,#_timer0_Servo_PWM_Width
0115 F8         832            mov     r0,a
0116 8603       833            mov     ar3,@r0
0118 08         834            inc     r0
0119 8604       835            mov     ar4,@r0
011B 18         836            dec     r0
011C            837   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:180: min_Index = jj;
011C 8A05       838            mov     ar5,r2
011E            839   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:182: for ( ii = jj; ii < NUM_OF_SERVOS; ii++)
011E 8A06       840            mov     ar6,r2
0120            841   L008007?:
0120 BE0400     842            cjne    r6,#0x04,L008045?
0123            843   L008045?:
0123 5001       844            jnc     L008010?
0125            845   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:185: if( timer0_Servo_PWM_Width[ii] < min)
0125 EE         846            mov     a,r6
0126 2E         847            add     a,r6
0127 FF         848            mov     r7,a
0128 2400       849            add     a,#_timer0_Servo_PWM_Width
012A F8         850            mov     r0,a
012B 8600       851            mov     _set_Servo_Priority_sloc0_1_0,@r0
012D 08         852            inc     r0
012E 8601       853            mov     (_set_Servo_Priority_sloc0_1_0 + 1),@r0
0130 18         854            dec     r0
0131 C3         855            clr     c
0132 E500       856            mov     a,_set_Servo_Priority_sloc0_1_0
0134 9B         857            subb    a,r3
0135 E501       858            mov     a,(_set_Servo_Priority_sloc0_1_0 + 1)
0137 9C         859            subb    a,r4
0138 5001       860            jnc     L008009?
013A            861   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:187: min = timer0_Servo_PWM_Width[ii];
013A AB00       862            mov     r3,_set_Servo_Priority_sloc0_1_0
013C AC01       863            mov     r4,(_set_Servo_Priority_sloc0_1_0 + 1)
013E            864   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:188: min_Index = ii;
013E 8E05       865            mov     ar5,r6
0140            866   L008009?:
0140            867   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:182: for ( ii = jj; ii < NUM_OF_SERVOS; ii++)
0140 0E         868            inc     r6
0141 8001       869            sjmp    L008007?
0143            870   L008010?:
0143            871   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:193: temp = timer0_Servo_PWM_Width[jj];
0143 EA         872            mov     a,r2
0144 2A         873            add     a,r2
0145 2400       874            add     a,#_timer0_Servo_PWM_Width
0147 F8         875            mov     r0,a
0148 8603       876            mov     ar3,@r0
014A 08         877            inc     r0
014B 8604       878            mov     ar4,@r0
014D 18         879            dec     r0
014E            880   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:194: timer0_Servo_PWM_Width[jj] = timer0_Servo_PWM_Width[min_Index]; 
014E ED         881            mov     a,r5
014F 2D         882            add     a,r5
0150 2400       883            add     a,#_timer0_Servo_PWM_Width
0152 F9         884            mov     r1,a
0153 8706       885            mov     ar6,@r1
0155 09         886            inc     r1
0156 8707       887            mov     ar7,@r1
0158 19         888            dec     r1
0159 A606       889            mov     @r0,ar6
015B 08         890            inc     r0
015C A607       891            mov     @r0,ar7
015E 18         892            dec     r0
015F            893   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:195: timer0_Servo_PWM_Width[min_Index] = temp; 
015F A703       894            mov     @r1,ar3
0161 09         895            inc     r1
0162 A704       896            mov     @r1,ar4
0164 19         897            dec     r1
0165            898   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:197: temp = servo_Index[jj];
0165 EA         899            mov     a,r2
0166 2400       900            add     a,#_set_Servo_Priority_servo_Index_1_1
0168 F8         901            mov     r0,a
0169 8606       902            mov     ar6,@r0
016B 8E03       903            mov     ar3,r6
016D 7C00       904            mov     r4,#0x00
016F            905   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:198: servo_Index[jj] = servo_Index[min_Index];
016F ED         906            mov     a,r5
0170 2400       907            add     a,#_set_Servo_Priority_servo_Index_1_1
0172 F9         908            mov     r1,a
0173 8705       909            mov     ar5,@r1
0175 A605       910            mov     @r0,ar5
0177            911   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:199: servo_Index[min_Index] = temp;
0177 8B05       912            mov     ar5,r3
0179 A705       913            mov     @r1,ar5
017B            914   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:176: for (jj = 0; jj < NUM_OF_SERVOS; jj++)
017B 0A         915            inc     r2
017C 020100     916            ljmp    L008011?
017F            917   L008014?:
017F            918   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:202: temp = 0xFF;
017F 7BFF       919            mov     r3,#0xFF
0181 7C00       920            mov     r4,#0x00
0183            921   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:206: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
0183 7A00       922            mov     r2,#0x00
0185            923   L008015?:
0185 BA0400     924            cjne    r2,#0x04,L008048?
0188            925   L008048?:
0188 5001       926            jnc     L008018?
018A            927   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:208: servo_Index[ii] = 1 << servo_Index[ii]; 
018A EA         928            mov     a,r2
018B 2400       929            add     a,#_set_Servo_Priority_servo_Index_1_1
018D F8         930            mov     r0,a
018E 8605       931            mov     ar5,@r0
0190 8DF0       932            mov     b,r5
0192 05F0       933            inc     b
0194 7401       934            mov     a,#0x01
0196 8001       935            sjmp    L008052?
0198            936   L008050?:
0198 25E0       937            add     a,acc
019A            938   L008052?:
019A D5F000     939            djnz    b,L008050?
019D FD         940            mov     r5,a
019E F6         941            mov     @r0,a
019F            942   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:209: temp = temp & (~servo_Index[ii]); //Flip since 0 turns servo off
019F 7E00       943            mov     r6,#0x00
01A1 ED         944            mov     a,r5
01A2 F4         945            cpl     a
01A3 FD         946            mov     r5,a
01A4 EE         947            mov     a,r6
01A5 F4         948            cpl     a
01A6 FE         949            mov     r6,a
01A7 ED         950            mov     a,r5
01A8 5203       951            anl     ar3,a
01AA EE         952            mov     a,r6
01AB 5204       953            anl     ar4,a
01AD            954   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:210: servo_Index[ii] = temp;
01AD 8B05       955            mov     ar5,r3
01AF A605       956            mov     @r0,ar5
01B1            957   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:206: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
01B1 0A         958            inc     r2
01B2 8001       959            sjmp    L008015?
01B4            960   L008018?:
01B4            961   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:214: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
01B4 7A00       962            mov     r2,#0x00
01B6            963   L008019?:
01B6 BA0400     964            cjne    r2,#0x04,L008053?
01B9            965   L008053?:
01B9 5001       966            jnc     L008023?
01BB            967   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:216: servo_Priority[ii] = servo_Index[ii];
01BB EA         968            mov     a,r2
01BC 2400       969            add     a,#_servo_Priority
01BE F8         970            mov     r0,a
01BF EA         971            mov     a,r2
01C0 2400       972            add     a,#_set_Servo_Priority_servo_Index_1_1
01C2 F9         973            mov     r1,a
01C3 8703       974            mov     ar3,@r1
01C5 A603       975            mov     @r0,ar3
01C7            976   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:214: for (ii = 0; ii < NUM_OF_SERVOS; ii++)
01C7 0A         977            inc     r2
01C8 8001       978            sjmp    L008019?
01CA            979   L008023?:
01CA 22         980            ret
01CB            981   ;------------------------------------------------------------
01CB            982   ;Allocation info for local variables in function 'calculate_Timer_Cycle'
01CB            983   ;------------------------------------------------------------
01CB            984   ;ii                        Allocated with name '_calculate_Timer_Cycle_ii_1_1'
01CB            985   ;pulse_Calculation_Temp    Allocated to registers r3 r4 r5 r6 
01CB            986   ;sloc0                     Allocated with name '_calculate_Timer_Cycle_sloc0_1_0'
01CB            987   ;------------------------------------------------------------
01CB            988   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:223: static void calculate_Timer_Cycle(void)
01CB            989   ;        -----------------------------------------
01CB            990   ;         function calculate_Timer_Cycle
01CB            991   ;        -----------------------------------------
01CB            992   _calculate_Timer_Cycle:
01CB            993   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:231: for ( ii = 0; ii < NUM_OF_SERVOS; ii++)
01CB 750000     994            mov     _calculate_Timer_Cycle_ii_1_1,#0x00
01CE            995   L009003?:
01CE 74FC       996            mov     a,#0x100 - 0x04
01D0 2500       997            add     a,_calculate_Timer_Cycle_ii_1_1
01D2 5001       998            jnc     L009013?
01D4 22         999            ret
01D5           1000   L009013?:
01D5           1001   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:234: pulse_Calculation_Temp = servo_Set_Angle[ii] + servo_Offset[ii];     
01D5 E500      1002            mov     a,_calculate_Timer_Cycle_ii_1_1
01D7 2500      1003            add     a,_calculate_Timer_Cycle_ii_1_1
01D9 2400      1004            add     a,#_servo_Set_Angle
01DB F8        1005            mov     r0,a
01DC 8603      1006            mov     ar3,@r0
01DE 08        1007            inc     r0
01DF 8604      1008            mov     ar4,@r0
01E1 18        1009            dec     r0
01E2 E500      1010            mov     a,_calculate_Timer_Cycle_ii_1_1
01E4 2400      1011            add     a,#_servo_Offset
01E6 F8        1012            mov     r0,a
01E7 E6        1013            mov     a,@r0
01E8 FD        1014            mov     r5,a
01E9 33        1015            rlc     a
01EA 95E0      1016            subb    a,acc
01EC FE        1017            mov     r6,a
01ED ED        1018            mov     a,r5
01EE 2B        1019            add     a,r3
01EF FB        1020            mov     r3,a
01F0 EE        1021            mov     a,r6
01F1 3C        1022            addc    a,r4
01F2 FC        1023            mov     r4,a
01F3 7D00      1024            mov     r5,#0x00
01F5 7E00      1025            mov     r6,#0x00
01F7           1026   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:235: if(pulse_Calculation_Temp > MAX_ANGLE){
01F7 C3        1027            clr     c
01F8 74AF      1028            mov     a,#0xAF
01FA 9B        1029            subb    a,r3
01FB E4        1030            clr     a
01FC 9C        1031            subb    a,r4
01FD E4        1032            clr     a
01FE 9D        1033            subb    a,r5
01FF E4        1034            clr     a
0200 9E        1035            subb    a,r6
0201 5001      1036            jnc     L009002?
0203           1037   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:236: pulse_Calculation_Temp = MAX_ANGLE;
0203 7BAF      1038            mov     r3,#0xAF
0205 7C00      1039            mov     r4,#0x00
0207 7D00      1040            mov     r5,#0x00
0209 7E00      1041            mov     r6,#0x00
020B           1042   L009002?:
020B           1043   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:239: pulse_Calculation_Temp = (pulse_Calculation_Temp * 1000) + MINIMUM_WIDTH_LENGTH;
020B 8B00      1044            mov     __mullong_PARM_2,r3
020D 8C01      1045            mov     (__mullong_PARM_2 + 1),r4
020F 8D02      1046            mov     (__mullong_PARM_2 + 2),r5
0211 8E03      1047            mov     (__mullong_PARM_2 + 3),r6
0213 9003E8    1048            mov     dptr,#0x03E8
0216 E4        1049            clr     a
0217 F5F0      1050            mov     b,a
0219 120100    1051            lcall   __mullong
021C 858200    1052            mov     _calculate_Timer_Cycle_sloc0_1_0,dpl
021F 858301    1053            mov     (_calculate_Timer_Cycle_sloc0_1_0 + 1),dph
0222 85F002    1054            mov     (_calculate_Timer_Cycle_sloc0_1_0 + 2),b
0225 F503      1055            mov     (_calculate_Timer_Cycle_sloc0_1_0 + 3),a
0227 7460      1056            mov     a,#0x60
0229 2500      1057            add     a,_calculate_Timer_Cycle_sloc0_1_0
022B FB        1058            mov     r3,a
022C 74EA      1059            mov     a,#0xEA
022E 3501      1060            addc    a,(_calculate_Timer_Cycle_sloc0_1_0 + 1)
0230 FC        1061            mov     r4,a
0231 E4        1062            clr     a
0232 3502      1063            addc    a,(_calculate_Timer_Cycle_sloc0_1_0 + 2)
0234 FD        1064            mov     r5,a
0235 E4        1065            clr     a
0236 3503      1066            addc    a,(_calculate_Timer_Cycle_sloc0_1_0 + 3)
0238 FE        1067            mov     r6,a
0239           1068   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:240: pulse_Calculation_Temp *= 10;
0239 8B00      1069            mov     __mullong_PARM_2,r3
023B 8C01      1070            mov     (__mullong_PARM_2 + 1),r4
023D 8D02      1071            mov     (__mullong_PARM_2 + 2),r5
023F 8E03      1072            mov     (__mullong_PARM_2 + 3),r6
0241 90000A    1073            mov     dptr,#(0x0A&0x00ff)
0244 E4        1074            clr     a
0245 F5F0      1075            mov     b,a
0247 120100    1076            lcall   __mullong
024A           1077   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:241: pulse_Calculation_Temp /= CLOCK_CYCLE_PERIOD;//contains timer count to make pulse width for the angle for Right servo
024A 75000F    1078            mov     __divulong_PARM_2,#0x0F
024D 750101    1079            mov     (__divulong_PARM_2 + 1),#0x01
0250 750200    1080            mov     (__divulong_PARM_2 + 2),#0x00
0253 750300    1081            mov     (__divulong_PARM_2 + 3),#0x00
0256 120100    1082            lcall   __divulong
0259 AB82      1083            mov     r3,dpl
025B AC83      1084            mov     r4,dph
025D ADF0      1085            mov     r5,b
025F FE        1086            mov     r6,a
0260           1087   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:242: timer0_Servo_PWM_Width[ii] = pulse_Calculation_Temp;
0260 E500      1088            mov     a,_calculate_Timer_Cycle_ii_1_1
0262 2500      1089            add     a,_calculate_Timer_Cycle_ii_1_1
0264 FA        1090            mov     r2,a
0265 2400      1091            add     a,#_timer0_Servo_PWM_Width
0267 F8        1092            mov     r0,a
0268 A603      1093            mov     @r0,ar3
026A 08        1094            inc     r0
026B A604      1095            mov     @r0,ar4
026D 18        1096            dec     r0
026E           1097   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:231: for ( ii = 0; ii < NUM_OF_SERVOS; ii++)
026E 0500      1098            inc     _calculate_Timer_Cycle_ii_1_1
0270 020100    1099            ljmp    L009003?
0273           1100   ;------------------------------------------------------------
0273           1101   ;Allocation info for local variables in function 'set_Phases'
0273           1102   ;------------------------------------------------------------
0273           1103   ;zz                        Allocated with name '_set_Phases_zz_1_1'
0273           1104   ;temp                      Allocated to registers r2 r3 
0273           1105   ;------------------------------------------------------------
0273           1106   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:249: static void set_Phases(void)
0273           1107   ;        -----------------------------------------
0273           1108   ;         function set_Phases
0273           1109   ;        -----------------------------------------
0273           1110   _set_Phases:
0273           1111   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:256: temp = TIMER_MAX_VALUE - timer0_Servo_PWM_Width[0]; 
0273 7800      1112            mov     r0,#_timer0_Servo_PWM_Width
0275 8602      1113            mov     ar2,@r0
0277 08        1114            inc     r0
0278 8603      1115            mov     ar3,@r0
027A E4        1116            clr     a
027B FC        1117            mov     r4,a
027C FD        1118            mov     r5,a
027D 74FF      1119            mov     a,#0xFF
027F C3        1120            clr     c
0280 9A        1121            subb    a,r2
0281 FA        1122            mov     r2,a
0282 74FF      1123            mov     a,#0xFF
0284 9B        1124            subb    a,r3
0285 FB        1125            mov     r3,a
0286 E4        1126            clr     a
0287 9C        1127            subb    a,r4
0288 E4        1128            clr     a
0289 9D        1129            subb    a,r5
028A           1130   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:257: TH0_Phase[0] = temp  / 0x100; //HIGH_BYTE
028A 8B04      1131            mov     ar4,r3
028C 7D00      1132            mov     r5,#0x00
028E 8C00      1133            mov     _TH0_Phase,r4
0290 8D01      1134            mov     (_TH0_Phase + 1),r5
0292           1135   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:258: TL0_Phase[0] = temp  % 0x100; //LOW_BYTE
0292 8A04      1136            mov     ar4,r2
0294 7D00      1137            mov     r5,#0x00
0296 8C00      1138            mov     _TL0_Phase,r4
0298 8D01      1139            mov     (_TL0_Phase + 1),r5
029A           1140   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:261: temp =  TIMER_MAX_VALUE - (RELOAD_5MS - timer0_Servo_PWM_Width[NUM_OF_SERVOS - 1]); //TEMP store difference
029A 7806      1141            mov     r0,#(_timer0_Servo_PWM_Width + 0x0006)
029C 8604      1142            mov     ar4,@r0
029E 08        1143            inc     r0
029F 8605      1144            mov     ar5,@r0
02A1 E4        1145            clr     a
02A2 FE        1146            mov     r6,a
02A3 FF        1147            mov     r7,a
02A4 7412      1148            mov     a,#0x12
02A6 C3        1149            clr     c
02A7 9C        1150            subb    a,r4
02A8 FC        1151            mov     r4,a
02A9 7448      1152            mov     a,#0x48
02AB 9D        1153            subb    a,r5
02AC FD        1154            mov     r5,a
02AD E4        1155            clr     a
02AE 9E        1156            subb    a,r6
02AF FE        1157            mov     r6,a
02B0 E4        1158            clr     a
02B1 9F        1159            subb    a,r7
02B2 FF        1160            mov     r7,a
02B3 74FF      1161            mov     a,#0xFF
02B5 C3        1162            clr     c
02B6 9C        1163            subb    a,r4
02B7 FC        1164            mov     r4,a
02B8 74FF      1165            mov     a,#0xFF
02BA 9D        1166            subb    a,r5
02BB FD        1167            mov     r5,a
02BC E4        1168            clr     a
02BD 9E        1169            subb    a,r6
02BE FE        1170            mov     r6,a
02BF E4        1171            clr     a
02C0 9F        1172            subb    a,r7
02C1 FF        1173            mov     r7,a
02C2 8C02      1174            mov     ar2,r4
02C4 8D03      1175            mov     ar3,r5
02C6           1176   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:262: TH0_Phase_FirstDelay = temp / 0x100; //HIGH_BYTE
02C6 8B00      1177            mov     _TH0_Phase_FirstDelay,r3
02C8 750100    1178            mov     (_TH0_Phase_FirstDelay + 1),#0x00
02CB           1179   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:263: TL0_Phase_FirstDelay = temp  % 0x100; //LOW_BYTE
02CB 8A00      1180            mov     _TL0_Phase_FirstDelay,r2
02CD 750100    1181            mov     (_TL0_Phase_FirstDelay + 1),#0x00
02D0           1182   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:266: for (zz = 1; zz < NUM_OF_SERVOS; zz++ )
02D0 750001    1183            mov     _set_Phases_zz_1_1,#0x01
02D3           1184   L010001?:
02D3 74FC      1185            mov     a,#0x100 - 0x04
02D5 2500      1186            add     a,_set_Phases_zz_1_1
02D7 4001      1187            jc      L010005?
02D9           1188   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:270: temp = TIMER_MAX_VALUE  - (timer0_Servo_PWM_Width[zz]  - timer0_Servo_PWM_Width[zz - 1]); 
02D9 E500      1189            mov     a,_set_Phases_zz_1_1
02DB 25E0      1190            add     a,acc
02DD 2400      1191            add     a,#_timer0_Servo_PWM_Width
02DF F8        1192            mov     r0,a
02E0 8604      1193            mov     ar4,@r0
02E2 08        1194            inc     r0
02E3 8605      1195            mov     ar5,@r0
02E5 18        1196            dec     r0
02E6 E500      1197            mov     a,_set_Phases_zz_1_1
02E8 14        1198            dec     a
02E9 25E0      1199            add     a,acc
02EB 2400      1200            add     a,#_timer0_Servo_PWM_Width
02ED F8        1201            mov     r0,a
02EE 8606      1202            mov     ar6,@r0
02F0 08        1203            inc     r0
02F1 8607      1204            mov     ar7,@r0
02F3 18        1205            dec     r0
02F4 EC        1206            mov     a,r4
02F5 C3        1207            clr     c
02F6 9E        1208            subb    a,r6
02F7 FC        1209            mov     r4,a
02F8 ED        1210            mov     a,r5
02F9 9F        1211            subb    a,r7
02FA FD        1212            mov     r5,a
02FB E4        1213            clr     a
02FC FE        1214            mov     r6,a
02FD FF        1215            mov     r7,a
02FE 74FF      1216            mov     a,#0xFF
0300 C3        1217            clr     c
0301 9C        1218            subb    a,r4
0302 FC        1219            mov     r4,a
0303 74FF      1220            mov     a,#0xFF
0305 9D        1221            subb    a,r5
0306 FD        1222            mov     r5,a
0307 E4        1223            clr     a
0308 9E        1224            subb    a,r6
0309 FE        1225            mov     r6,a
030A E4        1226            clr     a
030B 9F        1227            subb    a,r7
030C FF        1228            mov     r7,a
030D 8C02      1229            mov     ar2,r4
030F 8D03      1230            mov     ar3,r5
0311           1231   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:272: TH0_Phase[zz]= temp / 0x100; //HIGH BYTE
0311 E500      1232            mov     a,_set_Phases_zz_1_1
0313 25E0      1233            add     a,acc
0315 2400      1234            add     a,#_TH0_Phase
0317 F8        1235            mov     r0,a
0318 8B04      1236            mov     ar4,r3
031A 7D00      1237            mov     r5,#0x00
031C A604      1238            mov     @r0,ar4
031E 08        1239            inc     r0
031F A605      1240            mov     @r0,ar5
0321 18        1241            dec     r0
0322           1242   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:273: TL0_Phase[zz] = temp  % 0x100; //LOW_BYTE
0322 E500      1243            mov     a,_set_Phases_zz_1_1
0324 25E0      1244            add     a,acc
0326 FC        1245            mov     r4,a
0327 2400      1246            add     a,#_TL0_Phase
0329 F8        1247            mov     r0,a
032A 7B00      1248            mov     r3,#0x00
032C A602      1249            mov     @r0,ar2
032E 08        1250            inc     r0
032F A603      1251            mov     @r0,ar3
0331 18        1252            dec     r0
0332           1253   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Servo_PWM.h:266: for (zz = 1; zz < NUM_OF_SERVOS; zz++ )
0332 0500      1254            inc     _set_Phases_zz_1_1
0334 8001      1255            sjmp    L010001?
0336           1256   L010005?:
0336 22        1257            ret
0337           1258   ;------------------------------------------------------------
0337           1259   ;Allocation info for local variables in function 'get_Command'
0337           1260   ;------------------------------------------------------------
0337           1261   ;angle                     Allocated to registers r2 r3 
0337           1262   ;buffer                    Allocated with name '_get_Command_buffer_1_1'
0337           1263   ;command                   Allocated to registers r4 
0337           1264   ;------------------------------------------------------------
0337           1265   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:20: void get_Command(void)
0337           1266   ;        -----------------------------------------
0337           1267   ;         function get_Command
0337           1268   ;        -----------------------------------------
0337           1269   _get_Command:
0337           1270   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:22: unsigned int angle = 0;
0337 7A00      1271            mov     r2,#0x00
0339 7B00      1272            mov     r3,#0x00
033B           1273   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:24: char command = NONE;
033B 7CFE      1274            mov     r4,#0xFE
033D           1275   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:26: gets(buffer);
033D 900000    1276            mov     dptr,#_get_Command_buffer_1_1
0340 75F040    1277            mov     b,#0x40
0343 C002      1278            push    ar2
0345 C003      1279            push    ar3
0347 C004      1280            push    ar4
0349 120100    1281            lcall   _gets
034C D004      1282            pop     ar4
034E D003      1283            pop     ar3
0350 D002      1284            pop     ar2
0352           1285   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:27: RI = 0;
0352 C298      1286            clr     _RI
0354           1287   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:29: if(buffer[0] != 'f' && buffer[0] != 'x'){
0354 AD00      1288            mov     r5,_get_Command_buffer_1_1
0356 BD6600    1289            cjne    r5,#0x66,L011040?
0359 8001      1290            sjmp    L011005?
035B           1291   L011040?:
035B BD7800    1292            cjne    r5,#0x78,L011041?
035E 8001      1293            sjmp    L011005?
0360           1294   L011041?:
0360           1295   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:30: if(strlen(buffer) < 2){
0360 900000    1296            mov     dptr,#_get_Command_buffer_1_1
0363 75F040    1297            mov     b,#0x40
0366 C004      1298            push    ar4
0368 120100    1299            lcall   _strlen
036B AD82      1300            mov     r5,dpl
036D AE83      1301            mov     r6,dph
036F D004      1302            pop     ar4
0371 C3        1303            clr     c
0372 ED        1304            mov     a,r5
0373 9402      1305            subb    a,#0x02
0375 EE        1306            mov     a,r6
0376 9400      1307            subb    a,#0x00
0378 5001      1308            jnc     L011002?
037A           1309   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:31: return;
037A 22        1310            ret
037B           1311   L011002?:
037B           1312   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:34: angle = atoi(buffer + 1);
037B 900001    1313            mov     dptr,#(_get_Command_buffer_1_1 + 0x0001)
037E 75F040    1314            mov     b,#0x40
0381 C004      1315            push    ar4
0383 120100    1316            lcall   _atoi
0386 AA82      1317            mov     r2,dpl
0388 AB83      1318            mov     r3,dph
038A D004      1319            pop     ar4
038C           1320   L011005?:
038C           1321   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:39: switch(buffer[0])
038C AD00      1322            mov     r5,_get_Command_buffer_1_1
038E BD6200    1323            cjne    r5,#0x62,L011043?
0391 8001      1324            sjmp    L011008?
0393           1325   L011043?:
0393 BD6500    1326            cjne    r5,#0x65,L011044?
0396 8001      1327            sjmp    L011012?
0398           1328   L011044?:
0398 BD6600    1329            cjne    r5,#0x66,L011045?
039B 8001      1330            sjmp    L011014?
039D           1331   L011045?:
039D BD7300    1332            cjne    r5,#0x73,L011046?
03A0 8001      1333            sjmp    L011007?
03A2           1334   L011046?:
03A2 BD7700    1335            cjne    r5,#0x77,L011047?
03A5 8001      1336            sjmp    L011013?
03A7           1337   L011047?:
03A7           1338   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:41: case('s'):
03A7 BD7800    1339            cjne    r5,#0x78,L011016?
03AA 8001      1340            sjmp    L011015?
03AC           1341   L011007?:
03AC           1342   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:42: command = SHOULDER;      
03AC 7C03      1343            mov     r4,#0x03
03AE           1344   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:43: break;
03AE           1345   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:44: case('b'):                                       
03AE 8001      1346            sjmp    L011016?
03B0           1347   L011008?:
03B0           1348   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:45: if(angle <= 135){
03B0 C3        1349            clr     c
03B1 7487      1350            mov     a,#0x87
03B3 9A        1351            subb    a,r2
03B4 E4        1352            clr     a
03B5 9B        1353            subb    a,r3
03B6 4001      1354            jc      L011010?
03B8           1355   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:46: command = BICEP;
03B8 7C02      1356            mov     r4,#0x02
03BA 8001      1357            sjmp    L011016?
03BC           1358   L011010?:
03BC           1359   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:49: printf_tiny("Bicep max angle of 145");
03BC C002      1360            push    ar2
03BE C003      1361            push    ar3
03C0 C004      1362            push    ar4
03C2 7400      1363            mov     a,#__str_0
03C4 C0E0      1364            push    acc
03C6 7400      1365            mov     a,#(__str_0 >> 8)
03C8 C0E0      1366            push    acc
03CA 120100    1367            lcall   _printf_tiny
03CD 1581      1368            dec     sp
03CF 1581      1369            dec     sp
03D1 D004      1370            pop     ar4
03D3 D003      1371            pop     ar3
03D5 D002      1372            pop     ar2
03D7           1373   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:51: break;
03D7           1374   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:52: case('e'):
03D7 8001      1375            sjmp    L011016?
03D9           1376   L011012?:
03D9           1377   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:53: command = ELBOW;
03D9 7C01      1378            mov     r4,#0x01
03DB           1379   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:54: angle = 180 - angle;
03DB 74B4      1380            mov     a,#0xB4
03DD C3        1381            clr     c
03DE 9A        1382            subb    a,r2
03DF FA        1383            mov     r2,a
03E0 E4        1384            clr     a
03E1 9B        1385            subb    a,r3
03E2 FB        1386            mov     r3,a
03E3           1387   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:55: break;
03E3           1388   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:56: case('w'):
03E3 8001      1389            sjmp    L011016?
03E5           1390   L011013?:
03E5           1391   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:57: command = WRIST;
03E5 7C00      1392            mov     r4,#0x00
03E7           1393   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:58: break;
03E7           1394   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:59: case('f'):
03E7 8001      1395            sjmp    L011016?
03E9           1396   L011014?:
03E9           1397   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:60: command = FAN;
03E9 7CFF      1398            mov     r4,#0xFF
03EB           1399   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:61: break;
03EB           1400   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:62: case('x'):
03EB 8001      1401            sjmp    L011016?
03ED           1402   L011015?:
03ED           1403   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:63: command = SAFETY;
03ED 7C0A      1404            mov     r4,#0x0A
03EF           1405   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:65: }
03EF           1406   L011016?:
03EF           1407   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:67: if(command == FAN){
03EF BCFF00    1408            cjne    r4,#0xFF,L011023?
03F2           1409   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:68: P2_4 ^= 1;
03F2 B2A4      1410            cpl     _P2_4
03F4 22        1411            ret
03F5           1412   L011023?:
03F5           1413   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:70: else if(command == SAFETY){
03F5 BC0A00    1414            cjne    r4,#0x0A,L011020?
03F8           1415   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:71: safety_Position();
03F8 020100    1416            ljmp    _safety_Position
03FB           1417   L011020?:
03FB           1418   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:73: else if(command != NONE){
03FB BCFE00    1419            cjne    r4,#0xFE,L011054?
03FE 22        1420            ret
03FF           1421   L011054?:
03FF           1422   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:74: max_Servo_Set_Angle[command % NUM_OF_SERVOS] = angle;
03FF EC        1423            mov     a,r4
0400 A2E7      1424            mov     c,acc.7
0402 5403      1425            anl     a,#0x03
0404 6001      1426            jz      L011055?
0406 5001      1427            jnc     L011055?
0408 44FC      1428            orl     a,#0xfc
040A           1429   L011055?:
040A 2400      1430            add     a,#_max_Servo_Set_Angle
040C F8        1431            mov     r0,a
040D A602      1432            mov     @r0,ar2
040F 22        1433            ret
0410           1434   ;------------------------------------------------------------
0410           1435   ;Allocation info for local variables in function 'safety_Position'
0410           1436   ;------------------------------------------------------------
0410           1437   ;------------------------------------------------------------
0410           1438   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:79: void safety_Position(void){
0410           1439   ;        -----------------------------------------
0410           1440   ;         function safety_Position
0410           1441   ;        -----------------------------------------
0410           1442   _safety_Position:
0410           1443   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:81: max_Servo_Set_Angle[SHOULDER] = SHOULDER_ANGLE;
0410 7803      1444            mov     r0,#(_max_Servo_Set_Angle + 0x0003)
0412 765A      1445            mov     @r0,#0x5A
0414           1446   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:82: Wait1S();
0414 120100    1447            lcall   _Wait1S
0417           1448   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:83: Wait1S();
0417 120100    1449            lcall   _Wait1S
041A           1450   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:84: max_Servo_Set_Angle[WRIST] = WRIST_ANGLE;
041A 7800      1451            mov     r0,#_max_Servo_Set_Angle
041C 768C      1452            mov     @r0,#0x8C
041E           1453   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:85: Wait1S();
041E 120100    1454            lcall   _Wait1S
0421           1455   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:86: Wait1S();
0421 120100    1456            lcall   _Wait1S
0424           1457   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:87: max_Servo_Set_Angle[ELBOW] = 100; //intermediate angle
0424 7801      1458            mov     r0,#(_max_Servo_Set_Angle + 0x0001)
0426 7664      1459            mov     @r0,#0x64
0428           1460   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:88: Wait1S();
0428 120100    1461            lcall   _Wait1S
042B           1462   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:89: Wait1S();
042B 120100    1463            lcall   _Wait1S
042E           1464   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:90: max_Servo_Set_Angle[BICEP] = BICEP_ANGLE;
042E 7802      1465            mov     r0,#(_max_Servo_Set_Angle + 0x0002)
0430 7630      1466            mov     @r0,#0x30
0432           1467   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:91: Wait1S();
0432 120100    1468            lcall   _Wait1S
0435           1469   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:92: Wait1S();
0435 120100    1470            lcall   _Wait1S
0438           1471   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Serial.h:93: max_Servo_Set_Angle[ELBOW] = ELBOW_ANGLE;
0438 7801      1472            mov     r0,#(_max_Servo_Set_Angle + 0x0001)
043A 76AA      1473            mov     @r0,#0xAA
043C 22        1474            ret
043D           1475   ;------------------------------------------------------------
043D           1476   ;Allocation info for local variables in function 'set_Angle'
043D           1477   ;------------------------------------------------------------
043D           1478   ;angle                     Allocated with name '_set_Angle_PARM_2'
043D           1479   ;servo_Index               Allocated to registers r2 
043D           1480   ;------------------------------------------------------------
043D           1481   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:4: void set_Angle(unsigned char servo_Index, unsigned int angle)
043D           1482   ;        -----------------------------------------
043D           1483   ;         function set_Angle
043D           1484   ;        -----------------------------------------
043D           1485   _set_Angle:
043D           1486   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:6: if(servo_Offset[servo_Index] < 0 && abs(servo_Offset[servo_Index]) > angle){
043D E582      1487            mov     a,dpl
043F FA        1488            mov     r2,a
0440 2400      1489            add     a,#_servo_Offset
0442 F8        1490            mov     r0,a
0443 E6        1491            mov     a,@r0
0444 FB        1492            mov     r3,a
0445 30E700    1493            jnb     acc.7,L013005?
0448 EB        1494            mov     a,r3
0449 33        1495            rlc     a
044A 95E0      1496            subb    a,acc
044C FC        1497            mov     r4,a
044D 8B82      1498            mov     dpl,r3
044F 8C83      1499            mov     dph,r4
0451 C002      1500            push    ar2
0453 120100    1501            lcall   _abs
0456 AB82      1502            mov     r3,dpl
0458 AC83      1503            mov     r4,dph
045A D002      1504            pop     ar2
045C C3        1505            clr     c
045D E500      1506            mov     a,_set_Angle_PARM_2
045F 9B        1507            subb    a,r3
0460 E501      1508            mov     a,(_set_Angle_PARM_2 + 1)
0462 9C        1509            subb    a,r4
0463 5001      1510            jnc     L013005?
0465           1511   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:7: angle = 0;
0465 E4        1512            clr     a
0466 F500      1513            mov     _set_Angle_PARM_2,a
0468 F501      1514            mov     (_set_Angle_PARM_2 + 1),a
046A 8001      1515            sjmp    L013006?
046C           1516   L013005?:
046C           1517   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:9: else if( (servo_Offset[servo_Index] + angle) > MAX_ANGLE){
046C EA        1518            mov     a,r2
046D 2400      1519            add     a,#_servo_Offset
046F F8        1520            mov     r0,a
0470 E6        1521            mov     a,@r0
0471 FB        1522            mov     r3,a
0472 33        1523            rlc     a
0473 95E0      1524            subb    a,acc
0475 FC        1525            mov     r4,a
0476 E500      1526            mov     a,_set_Angle_PARM_2
0478 2B        1527            add     a,r3
0479 FD        1528            mov     r5,a
047A E501      1529            mov     a,(_set_Angle_PARM_2 + 1)
047C 3C        1530            addc    a,r4
047D FE        1531            mov     r6,a
047E C3        1532            clr     c
047F 74AF      1533            mov     a,#0xAF
0481 9D        1534            subb    a,r5
0482 E4        1535            clr     a
0483 9E        1536            subb    a,r6
0484 5001      1537            jnc     L013002?
0486           1538   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:10: angle = MAX_ANGLE;
0486 7500AF    1539            mov     _set_Angle_PARM_2,#0xAF
0489 E4        1540            clr     a
048A F501      1541            mov     (_set_Angle_PARM_2 + 1),a
048C 8001      1542            sjmp    L013006?
048E           1543   L013002?:
048E           1544   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:13: angle += servo_Offset[servo_Index];
048E EB        1545            mov     a,r3
048F 2500      1546            add     a,_set_Angle_PARM_2
0491 F500      1547            mov     _set_Angle_PARM_2,a
0493 EC        1548            mov     a,r4
0494 3501      1549            addc    a,(_set_Angle_PARM_2 + 1)
0496 F501      1550            mov     (_set_Angle_PARM_2 + 1),a
0498           1551   L013006?:
0498           1552   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\/Positioning.h:16: max_Servo_Set_Angle[servo_Index] = angle;
0498 EA        1553            mov     a,r2
0499 2400      1554            add     a,#_max_Servo_Set_Angle
049B F8        1555            mov     r0,a
049C AA00      1556            mov     r2,_set_Angle_PARM_2
049E A602      1557            mov     @r0,ar2
04A0 22        1558            ret
04A1           1559   ;------------------------------------------------------------
04A1           1560   ;Allocation info for local variables in function 'init_Servo'
04A1           1561   ;------------------------------------------------------------
04A1           1562   ;ii                        Allocated to registers r2 
04A1           1563   ;starting_Angles           Allocated with name '_init_Servo_starting_Angles_1_1'
04A1           1564   ;------------------------------------------------------------
04A1           1565   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:20: void init_Servo(void){
04A1           1566   ;        -----------------------------------------
04A1           1567   ;         function init_Servo
04A1           1568   ;        -----------------------------------------
04A1           1569   _init_Servo:
04A1           1570   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:23: unsigned char starting_Angles[] = {WRIST_ANGLE + SERVO_WRIST_OFFSET, ELBOW_ANGLE + SERVO_ELBOW_OFFSET,
04A1 75008C    1571            mov     _init_Servo_starting_Angles_1_1,#0x8C
04A4 7501AA    1572            mov     (_init_Servo_starting_Angles_1_1 + 0x0001),#0xAA
04A7 75023A    1573            mov     (_init_Servo_starting_Angles_1_1 + 0x0002),#0x3A
04AA 750355    1574            mov     (_init_Servo_starting_Angles_1_1 + 0x0003),#0x55
04AD           1575   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:26: P0M1 = 0x00;//set low to 0 and high to 1 for output
04AD 758400    1576            mov     _P0M1,#0x00
04B0           1577   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:27: P0M2 = 0xFF;
04B0 7585FF    1578            mov     _P0M2,#0xFF
04B3           1579   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:28: P0 = 0;
04B3 758000    1580            mov     _P0,#0x00
04B6           1581   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:30: for(ii =0; ii < NUM_OF_SERVOS; ii++){
04B6 7A00      1582            mov     r2,#0x00
04B8           1583   L014001?:
04B8 BA0400    1584            cjne    r2,#0x04,L014010?
04BB           1585   L014010?:
04BB 5001      1586            jnc     L014005?
04BD           1587   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:31: max_Servo_Set_Angle[ii] = starting_Angles[ii];
04BD EA        1588            mov     a,r2
04BE 2400      1589            add     a,#_max_Servo_Set_Angle
04C0 F8        1590            mov     r0,a
04C1 EA        1591            mov     a,r2
04C2 2400      1592            add     a,#_init_Servo_starting_Angles_1_1
04C4 F9        1593            mov     r1,a
04C5 8703      1594            mov     ar3,@r1
04C7 A603      1595            mov     @r0,ar3
04C9           1596   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:32: servo_Set_Angle[ii] = starting_Angles[ii];
04C9 EA        1597            mov     a,r2
04CA 2A        1598            add     a,r2
04CB 2400      1599            add     a,#_servo_Set_Angle
04CD F8        1600            mov     r0,a
04CE 7C00      1601            mov     r4,#0x00
04D0 A603      1602            mov     @r0,ar3
04D2 08        1603            inc     r0
04D3 A604      1604            mov     @r0,ar4
04D5 18        1605            dec     r0
04D6           1606   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:30: for(ii =0; ii < NUM_OF_SERVOS; ii++){
04D6 0A        1607            inc     r2
04D7 8001      1608            sjmp    L014001?
04D9           1609   L014005?:
04D9 22        1610            ret
04DA           1611   ;------------------------------------------------------------
04DA           1612   ;Allocation info for local variables in function 'set_Timer0'
04DA           1613   ;------------------------------------------------------------
04DA           1614   ;------------------------------------------------------------
04DA           1615   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:36: void set_Timer0 (void) 
04DA           1616   ;        -----------------------------------------
04DA           1617   ;         function set_Timer0
04DA           1618   ;        -----------------------------------------
04DA           1619   _set_Timer0:
04DA           1620   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:38: TR0 = 0; // Stop timer 0 
04DA C28C      1621            clr     _TR0
04DC           1622   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:39: TL0 = 0;
04DC 758A00    1623            mov     _TL0,#0x00
04DF           1624   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:40: TH0 = 0; 
04DF 758C00    1625            mov     _TH0,#0x00
04E2           1626   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:41: TMOD = (TMOD|0x01);
04E2 438901    1627            orl     _TMOD,#0x01
04E5           1628   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:42: ET0 = 1; // Enable timer 0 interrupt 
04E5 D2A9      1629            setb    _ET0
04E7           1630   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:43: EA = 1; // Enable global interrupts 
04E7 D2AF      1631            setb    _EA
04E9           1632   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:44: TR0 = 1; // Start timer 0 
04E9 D28C      1633            setb    _TR0
04EB 22        1634            ret
04EC           1635   ;------------------------------------------------------------
04EC           1636   ;Allocation info for local variables in function 'set_Timer1'
04EC           1637   ;------------------------------------------------------------
04EC           1638   ;------------------------------------------------------------
04EC           1639   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:47: void set_Timer1 (void) 
04EC           1640   ;        -----------------------------------------
04EC           1641   ;         function set_Timer1
04EC           1642   ;        -----------------------------------------
04EC           1643   _set_Timer1:
04EC           1644   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:49: TR1 = 0; // Stop timer 1 
04EC C28E      1645            clr     _TR1
04EE           1646   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:50: TL1 = 0;
04EE 758B00    1647            mov     _TL1,#0x00
04F1           1648   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:51: TH1 = 0; 
04F1 758D00    1649            mov     _TH1,#0x00
04F4           1650   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:52: TMOD = (TMOD|0x10);
04F4 438910    1651            orl     _TMOD,#0x10
04F7           1652   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:53: ET1 = 1; // Enable timer 1 interrupt 
04F7 D2AB      1653            setb    _ET1
04F9           1654   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:54: EA = 1; // Enable global interrupts 
04F9 D2AF      1655            setb    _EA
04FB           1656   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:55: TR1 = 1; // Start timer 1  
04FB D28E      1657            setb    _TR1
04FD 22        1658            ret
04FE           1659   ;------------------------------------------------------------
04FE           1660   ;Allocation info for local variables in function 'init_Serial_Port'
04FE           1661   ;------------------------------------------------------------
04FE           1662   ;------------------------------------------------------------
04FE           1663   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:59: void init_Serial_Port(void)
04FE           1664   ;        -----------------------------------------
04FE           1665   ;         function init_Serial_Port
04FE           1666   ;        -----------------------------------------
04FE           1667   _init_Serial_Port:
04FE           1668   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:61: BRGCON = 0x00; //Make sure the baud rate generator is off
04FE 75BD00    1669            mov     _BRGCON,#0x00
0501           1670   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:62: BRGR1 = ((XTAL/BAUD)-16)/0x100;
0501 75BF00    1671            mov     _BRGR1,#0x00
0504           1672   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:63: BRGR0 = ((XTAL/BAUD)-16)%0x100;
0504 75BE30    1673            mov     _BRGR0,#0x30
0507           1674   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:64: BRGCON = 0x03; //Turn-on the baud rate generator
0507 75BD03    1675            mov     _BRGCON,#0x03
050A           1676   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:65: SCON = 0x52; //Serial port in mode 1, ren, txrdy, rxempty
050A 759852    1677            mov     _SCON,#0x52
050D           1678   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:66: P1M1 = 0x00; //Enable pins RxD and Txd
050D 759100    1679            mov     _P1M1,#0x00
0510           1680   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:67: P1M2 = 0x00; //Enable pins RxD and Txd
0510 759200    1681            mov     _P1M2,#0x00
0513 22        1682            ret
0514           1683   ;------------------------------------------------------------
0514           1684   ;Allocation info for local variables in function 'init_ADC'
0514           1685   ;------------------------------------------------------------
0514           1686   ;------------------------------------------------------------
0514           1687   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:70: void init_ADC(void)
0514           1688   ;        -----------------------------------------
0514           1689   ;         function init_ADC
0514           1690   ;        -----------------------------------------
0514           1691   _init_ADC:
0514           1692   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:74: P1M1 = (0xE0|P1M1);
0514 4391E0    1693            orl     _P1M1,#0xE0
0517           1694   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:75: P1M2 = (0x1F&P1M2);
0517 53921F    1695            anl     _P1M2,#0x1F
051A           1696   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:77: BURST0 = 1;
051A D2C2      1697            setb    _BURST0
051C           1698   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:78: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
051C 75A120    1699            mov     _ADMODB,#0x20
051F           1700   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:79: ADINS  = 0x08; // Select the four channels for conversion
051F 75A308    1701            mov     _ADINS,#0x08
0522           1702   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:80: ADCON0 = 0x05;//Enable the converter and start immediately
0522 758E05    1703            mov     _ADCON0,#0x05
0525 22        1704            ret
0526           1705   ;------------------------------------------------------------
0526           1706   ;Allocation info for local variables in function 'init_Fans'
0526           1707   ;------------------------------------------------------------
0526           1708   ;------------------------------------------------------------
0526           1709   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:84: void init_Fans(void)
0526           1710   ;        -----------------------------------------
0526           1711   ;         function init_Fans
0526           1712   ;        -----------------------------------------
0526           1713   _init_Fans:
0526           1714   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:86: P2M1 = 0x00;
0526 75A400    1715            mov     _P2M1,#0x00
0529           1716   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:87: P2M2 = 0xFF;
0529 75A5FF    1717            mov     _P2M2,#0xFF
052C           1718   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:89: P2_0 = 1;
052C D2A0      1719            setb    _P2_0
052E           1720   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:90: P2_1 = 1;
052E D2A1      1721            setb    _P2_1
0530           1722   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:91: P2_2 = 1;
0530 D2A2      1723            setb    _P2_2
0532           1724   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:92: P2_3 = 1;
0532 D2A3      1725            setb    _P2_3
0534           1726   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:93: P2_4 = 0;
0534 C2A4      1727            clr     _P2_4
0536 22        1728            ret
0537           1729   ;------------------------------------------------------------
0537           1730   ;Allocation info for local variables in function 'main'
0537           1731   ;------------------------------------------------------------
0537           1732   ;------------------------------------------------------------
0537           1733   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:96: void main(void)
0537           1734   ;        -----------------------------------------
0537           1735   ;         function main
0537           1736   ;        -----------------------------------------
0537           1737   _main:
0537           1738   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:98: EA = 0;
0537 C2AF      1739            clr     _EA
0539           1740   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:99: init_Servo();
0539 120100    1741            lcall   _init_Servo
053C           1742   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:100: set_Pulse_Width();
053C 120100    1743            lcall   _set_Pulse_Width
053F           1744   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:101: set_Timer0();
053F 120100    1745            lcall   _set_Timer0
0542           1746   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:102: set_Timer1();
0542 120100    1747            lcall   _set_Timer1
0545           1748   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:103: init_Serial_Port();
0545 120100    1749            lcall   _init_Serial_Port
0548           1750   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:104: Wait1S();
0548 120100    1751            lcall   _Wait1S
054B           1752   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:105: init_Fans();
054B 120100    1753            lcall   _init_Fans
054E           1754   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:106: printf_tiny("Ready for commands!\n");
054E 7400      1755            mov     a,#__str_1
0550 C0E0      1756            push    acc
0552 7400      1757            mov     a,#(__str_1 >> 8)
0554 C0E0      1758            push    acc
0556 120100    1759            lcall   _printf_tiny
0559 1581      1760            dec     sp
055B 1581      1761            dec     sp
055D           1762   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:108: while(1)
055D           1763   L020004?:
055D           1764   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:111: if (RI == 1)
055D 309800    1765            jnb     _RI,L020002?
0560           1766   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:113: get_Command();
0560 120100    1767            lcall   _get_Command
0563           1768   L020002?:
0563           1769   ;        D:\Gary\Workspace\UBC\Dropbox\Self Projects\P89Servo Arm\main.c:116: set_Pulse_Width();
0563 120100    1770            lcall   _set_Pulse_Width
0566 8001      1771            sjmp    L020004?
0568           1772            rseg R_CSEG
0568           1773   
0000           1774            rseg R_CONST
0000           1775   __str_0:
0000 42696365  1776            db 'Bicep max angle of 145'
     70206D61
     7820616E
     676C6520
     6F662031
     3435
0016 00        1777            db 0x00
0017           1778   __str_1:
0017 52656164  1779            db 'Ready for commands!'
     7920666F
     7220636F
     6D6D616E
     647321
002A 0A        1780            db 0x0A
002B 00        1781            db 0x00
002C           1782   
0000           1783            rseg R_XINIT
0000           1784   
001E           1785            CSEG
001E           1786   
001E           1787   end
